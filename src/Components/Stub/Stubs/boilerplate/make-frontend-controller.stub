<?php

namespace App\Http\Controllers\Frontend;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Exceptions\GeneralException;

use App\Models\DummyModel;
use App\Repositories\Frontend\DummyModel\DummyRepository;
use App\Http\Requests\Frontend\DummyModel\ManageDummyRequest;
use App\Http\Requests\Frontend\DummyModel\StoreDummyRequest;
use App\Http\Requests\Frontend\DummyModel\UpdateDummyRequest;

use App\Events\Frontend\DummyModel\DummyModelCreated;
use App\Events\Frontend\DummyModel\DummyModelUpdated;
use App\Events\Frontend\DummyModel\DummyModelDeleted;

class DummyController extends Controller
{
    /**
     * @var DummyRepository
     */
    protected $DummyRepoVariable;

    /**
     * DummyController constructor.
     *
     * @param DummyRepository $DummyRepoVariable
     */
    public function __construct(DummyRepository $DummyRepoVariable)
    {
        $this->DummyRepoVariable = $DummyRepoVariable;
    }

    /**
     * Display a listing of the resource.
     *
     * @param ManageDummyRequest $request
     *
     * @return \Illuminate\Contracts\View\Factory|\Illuminate\View\View
     */
    public function index(ManageDummyRequest $request)
    {
        return view('frontend.DummyView.index')
            ->withDummyArray($this->DummyRepoVariable->getActivePaginated(25, 'id', 'asc'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @param ManageDummyRequest    $request
     *
     * @return mixed
     */
    public function create(ManageDummyRequest $request)
    {
        return view('frontend.DummyView.create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param StoreDummyRequest $request
     *
     * @return mixed
     * @throws \Throwable
     */
    public function store(StoreDummyRequest $request)
    {
        $this->DummyRepoVariable->create($request->only(
            'DummyField'
        ));

        // Fire create event (DummyModelCreated)
        event(new DummyModelCreated($request));

        return redirect()->route('frontend.DummyRoute.index')
            ->withFlashSuccess(__('frontend_DummyLabel.alerts.created'));
    }

    /**
     * Display the specified resource.
     *
     * @param ManageDummyRequest  $request
     * @param DummyModel               $DummyVariable
     *
     * @return mixed
     */
    public function show(ManageDummyRequest $request, DummyModel $DummyVariable)
    {
        return view('frontend.DummyView.show')->withDummyModel($DummyVariable);
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param ManageDummyRequest $request
     * @param DummyModel              $DummyVariable
     *
     * @return mixed
     */
    public function edit(ManageDummyRequest $request, DummyModel $DummyVariable)
    {
        return view('frontend.DummyView.edit')->withDummyModel($DummyVariable);
    }

    /**
     * Update the specified resource in storage.
     *
     * @param UpdateDummyRequest  $request
     * @param DummyModel               $DummyVariable
     *
     * @return mixed
     * @throws \App\Exceptions\GeneralException
     * @throws \Throwable
     */
    public function update(UpdateDummyRequest $request, DummyModel $DummyVariable)
    {
        $this->DummyRepoVariable->update($DummyVariable, $request->only(
            'DummyField'
        ));

        // Fire update event (DummyModelUpdated)
        event(new DummyModelUpdated($request));

        return redirect()->route('frontend.DummyRoute.index')
            ->withFlashSuccess(__('frontend_DummyLabel.alerts.updated'));
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param ManageDummyRequest $request
     * @param DummyModel              $DummyVariable
     *
     * @return mixed
     * @throws \Exception
     */
    public function destroy(ManageDummyRequest $request, DummyModel $DummyVariable)
    {
        $this->DummyRepoVariable->deleteById($DummyVariable->id);

        // Fire delete event (DummyModelDeleted)
        event(new DummyModelDeleted($request));

        return redirect()->route('frontend.DummyRoute.deleted')
            ->withFlashSuccess(__('frontend_DummyLabel.alerts.deleted'));
    }

    /**
     * Permanently remove the specified resource from storage.
     *
     * @param ManageDummyRequest $request
     * @param DummyModel              $deletedDummyModel
     *
     * @return mixed
     * @throws \App\Exceptions\GeneralException
     * @throws \Throwable
     */
    public function delete(ManageDummyRequest $request, DummyModel $deletedDummyModel)
    {
        $this->DummyRepoVariable->forceDelete($deletedDummyModel);

        return redirect()->route('frontend.DummyRoute.deleted')
            ->withFlashSuccess(__('frontend_DummyLabel.alerts.deleted_permanently'));
    }

    /**
     * @param ManageDummyRequest $request
     * @param DummyModel              $deletedDummyModel
     *
     * @return mixed
     * @throws \App\Exceptions\GeneralException
     */
    public function restore(ManageDummyRequest $request, DummyModel $deletedDummyModel)
    {
        $this->DummyRepoVariable->restore($deletedDummyModel);

        return redirect()->route('frontend.DummyRoute.index')
            ->withFlashSuccess(__('frontend_DummyLabel.alerts.restored'));
    }

    /**
     * Display a listing of deleted items of the resource.
     *
     * @param ManageDummyRequest $request
     *
     * @return mixed
     */
    public function deleted(ManageDummyRequest $request)
    {
        return view('frontend.DummyView.deleted')
            ->withDummyArray($this->DummyRepoVariable->getDeletedPaginated(25, 'id', 'asc'));
    }
}
